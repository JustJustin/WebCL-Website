<script type="text/javascript">
function tutorialStart()
{   
    /* What's available for steps??? */
    /* options in [brackets] are optional and can be omitted */
    /*  text: string 
                    - The text to provide in the step text on the tutorial pane.
                        [code]some code[/code] tag is available.
        editor: Int - Which editor to target
        editorText: String/Boolean 
                    - The text to set in the targeted editor
                        Set to false to not mess with the text in the editor
                        [cursor] tag available to set cursor location
        [otherText]: {Int: String}
                    - Optional value. Set text for a map of editors. (Allows for 
                        the setting of text in editors other than the main one.)
                        Int is the editor to target
                        String is the text to set [cursor] tag is available
        complete: bool function (code, user, output)/bool
                    - Function to check for completion of step.
                        (user and output currently have no useful value)
                        code contains the current editor input
                        If this function returns true, the step is marked as complete.
                        If you set this to false, the user must instead click the 
                        "Next Step" button to continue.
        [lock]: bool
                    - If set to true, Sets editortext to readonly once the step has
                        been completed.
        [release]: bool
                    - If set to true, Releases lock set on previous step once this
                        step has been completed.
        [focus]: bool 
                    - If set to true, focuses the targeted editor. (Switches to tab)
        [force_focus]: bool
                    - If set to true, focuses the targeted editor and disables other
                        tabs until this step has been completed.
        [allow_skip]: bool
                    - If set to true, allows the step to be skipped by clicking the 
                        "Next Step" button.
    */
    var lesson = [
		{
            text:"Init 1",
            editor:0,
            editorText:'/js/tutorials/tutorial01/start.js',
            complete: function(code, user, output) {
                return true;
            },
            lock: false,
            force_focus: false,
        },
        {
            text:"Init 2",
            editor:1,
            editorText:'/js/tutorials/tutorial01/start.c',
            complete: function(code, user, output) {
                return true;
            },
            lock: false,
            release: true,
            force_focus: false,
            allow_skip: true
        },
        {
            text:"Write [code]print('hello');[/code]",
            editor:0,
            editorText: false,
            complete: function(code, user, output) {
                var reg = /print\(['"]hello['"]\);/gi;
                if( reg.exec( code ) ) {
                    return true;
                }
            },
            lock: false,
            force_focus: true,
        },
        {
            text:"Write [code]int ac;[/code]",
            editor:1,
            editorText: false,
            complete: function(code, user, output) {
                var reg = /int ac;/gi;
                if( reg.exec( code ) ) {
                    return true;
                }
                return false;
            },
            lock: false,
            release: true,
            force_focus: true,
            allow_skip: true
        },
        {
            text: "Skip me!",
            editor: 0,
            editorText: "Blank",
            complete: false,
            lock: true,
            force_focus: true
        }
    ];
    var $ll = $("ol.lessonList").first();
    var current = 0;
    var nextStep = undefined;

    function convertToAcePos( text, pos ) {
        lines = text.split("\n");
        for( var i = 0, x = 0; i < lines.length; ++i ) {
            if( (x + lines[i].length + 1) < pos ) {
                x += lines[i].length + 1;
            } else {
                return [i+1, pos - x];
            }
        }
        return( false );
    }
    function startStep( step ) {
        var codeReg = /\[code\](.+?)\[\/code\]/g;
        $li = document.createElement("li");
        var splits = step.text.split(codeReg);
        for( i = 1; i < splits.length; i+=2) {
            splits[i] = "<code class='lessonCode'>"+splits[i]+"</code>";
        }
        $li.innerHTML = splits.join("");
        $li.style.display = "none";
        $($ll).children().wrap("<strike>");
        $ll.append($li);
        $($li).fadeIn().effect("highlight");
        current++;
        
        editorWatcher.current = step.editor;
        function setEditorText( editor, text, focus ) {
            var cursorReg = /\[cursor\]/g;
            var splits = text.split(cursorReg);
            var cursorPos = false;
            if( splits.length > 1 ) {
                cursorPos = splits[0].length;
                text = splits.join("");
                cursorPos = convertToAcePos( text, cursorPos );
            }
            console.log( "Setting editor:"+editor+" "+text);
            document.editorInfo.editors[editor].setValue(text, 1);
            if( cursorPos ) {
                document.editorInfo.editors[editor].gotoLine(cursorPos[0], cursorPos[1], false);
            }
            if( focus ) {
                document.editorInfo.editors[editor].focus();
            }
            return( text );
        }
        if( step.editorText ) {

			$.get(step.editorText, function (data) {
				setEditorText(step.editor, data, false)
				});
        }
        if( ('otherText' in step) && step['otherText'] ) {
            for( k in step['otherText'] ) {
                step['otherText'][k] = setEditorText( k, step['otherText'][k], false );
            }
        }
        if( step.complete ) {
            editorWatcher.setHandler(step.editor, step.complete);
        }
        if( ('release' in step) && step['release'] ) {
            editorWatcher.setRelease(true);
        }
        if( ('lock' in step) && step['lock'] ) {
            editorWatcher.setLock(true);
        }
        if( ('force_focus' in step) && step['force_focus'] ) {
            editorWatcher.forceFocus( step.editor );
        }
        if( ('focus' in step) && step['focus'] ) {
            $("#tabs").tabs("option", "active", step.editor);
        }
        if( !step.complete || ( ('allow_skip' in step) && step['allow_skip'] ) ) {
            document.querySelector(".tutorialContent .nextButton").style.display = "block";
        } else {
            document.querySelector(".tutorialContent .nextButton").style.display = "none";
        }
        nextStep = undefined;
        if ( current < lesson.length ) {
            nextStep = lesson[current];
        }
    }
    
    /* Register ace editor watcher function */
    var editorWatcher = {
        current: 0,
        initial: undefined,
        editors: undefined,
        handlers: {},
        lock: false,
        release: false,
        lastlock: false,
        focusRelease: false,
        init: function() {
            this.editors = document.editorInfo.editors;
            this.initial = document.editorInfo.initialContent;
            for( var i = 0; i < this.editors.length; ++i ) {
                var _this = this;
                (function (n){
                    _this.editors[i].on("change", function( e ) {
                        editorWatcher.editorHandler( e, n );
                    });
                })(i);
            }
            $(".tutorialContent .nextButton").click( this.buttonHandler );
        },
        editorHandler: function( e, n ) {
            var _this = editorWatcher;
            if( (n in _this.handlers) && _this.handlers[n] ) {
                var current = _this.editors[n].getSession().getValue();
                var user = _this.diff(_this.initial[n], current);
                console.log( {current:current, user:user, output:undefined} );
                if( _this.handlers[n]( current, user, undefined ) ) {
                    _this.success(n);
                }
            }
        },
        buttonHandler: function(e) {
            _this = editorWatcher;
            _this.success(_this.current);
        },
        success: function(n) {
            window.alert( "SUCCESS" );
            this.handlers[n] = undefined;
            if( this.release && this.lastlock ) {
                this.lastlock.setReadOnly(false);
                this.lastlock = false;
                this.release = false;
            }
            if( this.focusRelease ) {
                this.focusRelease = false;
                $("#tabs").tabs("enable");
            }
            if( this.lock ) {
                this.editors[n].setReadOnly(true);
                this.lastlock = this.editors[n];
                this.lock = false;
            }
            if( nextStep ) {
                startStep(nextStep);
            }
        },
        setLock: function( b ) {
            if( b ) {
                this.lock = true;
            } else {
                this.lock = false;
                if( this.lastlock ) {
                    this.lastlock.setReadOnly(false);
                    this.lastlock = false;
                }
            }
        },
        forceFocus: function( n ) {
            $tabs = $("#tabs");
            $tabs.tabs("option", "active", n);
            for( var i = 0; i < this.editors.length; ++i ) {
                if( i == n ) {
                    continue;
                }
                $tabs.tabs("disable", i);
            }
            this.focusRelease = true;
        },
        setRelease: function( b ) {
            if( b ) {
                this.release = true;
            } else {
                this.release = false;
            }
        },
        setSuccess: function( f ) {
            this.success = f;
        },
        setHandler: function( key, handler ) {
            this.handlers[key] = handler;
        },
        diff: function( initial, current ) {
            return ""; /* Incomplete */
        }
    }
    console.log("tutorialStart");
    editorWatcher.init();
    startStep( lesson[0] );
}

/* Disgusting hack TODO: Get our generic loader object to handler our js needs */
window.tutorialStart = tutorialStart;
</script>

<div class="tutorialContent">
<ol class="lessonList">

</ol>
<div class="nextButton">
    <input type="button" value="Next Step"/>
</div>
</div>