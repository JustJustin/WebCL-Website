<script type="text/javascript">
function tutorialStart()
{   
    /* What's available for steps??? */
    /* options in [brackets] are optional and can be omitted */
    /*  text: string 
                    - The text to provide in the step text on the tutorial pane.
                        [code]some code[/code] tag is available.
        editor: Int - Which editor to target
        editorText: String/Boolean 
                    - The text to set in the targeted editor
                        Set to false to not mess with the text in the editor
                        [cursor] tag available to set cursor location
        [otherText]: {Int: String}
                    - Optional value. Set text for a map of editors. (Allows for 
                        the setting of text in editors other than the main one.)
                        Int is the editor to target
                        String is the text to set, [cursor] tag is available
        [gotoText]: {Int: /Regex/}
                    - Optional value. Jump to position of string in editor.
                        evaluates regex on editor position and jumps to where
                        the matched string starts. 
                        Int is the editor to target
        complete: bool function (code, user, output)/bool
                    - Function to check for completion of step.
                        (user and output currently have no useful value)
                        code contains the current editor input
                        If this function returns true, the step is marked as complete.
                        If you set this to false, the user must instead click the 
                        "Next Step" button to continue.
        [lock]: bool
                    - If set to true, Sets editortext to readonly once the step has
                        been completed.
        [release]: bool
                    - If set to true, Releases lock set on previous step once this
                        step has been completed.
        [focus]: bool 
                    - If set to true, focuses the targeted editor. (Switches to tab)
        [forceFocus]: bool
                    - If set to true, focuses the targeted editor and disables other
                        tabs until this step has been completed.
        [allowSkip]: bool
                    - If set to true, allows the step to be skipped by clicking the 
                        "Next Step" button.
						
		[init] : bool
					- Step to load in files 
    */
    
    /* Converts a string offset to the equivalent ace editor position.
       returns array( lineno, columno )
       TODO: Move to generic function file.
    */
    function convertToAcePos( text, pos ) {
        lines = text.split("\n");
        for( var i = 0, x = 0; i < lines.length; ++i ) {
            if( (x + lines[i].length + 1) < pos ) {
                x += lines[i].length + 1;
            } else {
                return [i+1, pos - x];
            }
        }
        return( false );
    }
    
    var lessonManager = {
        current: 0,
        lesson: false,
        nextStep: false,
        $lessonList: false,
        init: function( request ) {
            this.$lessonList = $("ol.lessonList").first();
            this.$lessonList.parent(".tutorialContainer").resize( this.resizeHandler );
        
            if( request != undefined ) {
                return this.fetch( request );
            }
            return this.fetch( "/js/tutorials/tutorial01/info.js" ); 
        },
        resizeHandler: function() {
            var _this = lessonManager;
            _this.contractSteps();
        },
        contractSteps: function() {
            var $lis = this.$lessonList.find( "li" );
            /* Insert our calculator element */
            if( !$lis.first().hasClass( "lmCalcWidth" ) ) {
                var el = document.createElement("li");
                el.className = "lmCalcWidth";
                el.style = "display: none;";
                this.$lessonList.prepend( el );
                
                $lis = this.$lessonList.find( "li" );
            }
            var lineCharWidth = false;
            function calculateInnerText( el, holder ) {
                var lineHeight = holder.text("a").height();
                var currentText = el.fullText;
                if( lineCharWidth ) { 
                    // TODO: do shortcut based on initial calculation
                    // currentText = shortcutText;
                }
                holder.text( currentText + "..." );
                while( holder.height() > lineHeight ) {
                    var i = currentText.lastIndexOf(" ");
                    if( i == -1 ) {
                        currentText = currentText.substr(0, currentText.length - 1);
                    } else { 
                        currentText = currentText.substr(0, i);
                    }
                    holder.text( currentText + "..." );
                    console.log( currentText );
                }
                lineCharWidth = currentText.length;
                return currentText + "...";
            }
            for( var i = 1; i < $lis.length - 1; ++i ) {
                var el = $lis[i];
                console.log(el);
                if( !$(el).hasClass("lmContractor") ) {
                    el.fullText = $(el).text();
                    el.innerText = calculateInnerText( el, $($lis[0]) );
                    $(el).text( el.innerText );
                    $(el).click( this.clickHandler );
                    $(el).addClass("lmContractor");
                } else { 
                    el.innerText = calculateInnerText( el, $($lis[0]) );
                }
            }
        },
        clickHandler: function() {
            console.log( this );
            if( this.innerText == $(this).text() ) {
                return $(this).text(this.fullText);
            }
            return $(this).text(this.innerText);
        },
        fetch: function( url ) {
            var req = new XMLHttpRequest();
            req.open("GET", url, true ); /* < That false is bad, fix that */
            
            var _this = this;
            req.onload = function() {
                if( this.status == 200 ) {
                    _this.handleResponse( this.responseText );
                } else {
                    console.log( "FATAL: fetch error for "+url );
                }
            }
            req.send();
        },
        handleResponse: function( response ) {
            if( /tutorial_data/.exec( response ) == false ) {
                console.log( "Fatal: no tutorial_data in request response" );
                return;
            }
            /* Evaluates JSON response with function */
            var el = document.createElement("script");
            el.type = "text/javascript";
            el.innerHTML = response;
            document.body.appendChild( el );
            if( tutorial_data ) {
                this.startTutorial( tutorial_data );
            } else {
                console.log( "Fatal: No tutorial_data" );
            }
        },
        startTutorial: function( tutorial_data ) {
            if( ( 'name' in tutorial_data) && (tutorial_data['name']) ) {
                $(".lessonName").text(tutorial_data.name);
            } else {
                $(".lessonName").text("Tutorial");
            }
            
            this.lesson = tutorial_data.steps;
            this.step( this.lesson[0] );
        },
        setEditorText: function( editor, text, focus ) {
            var cursorReg = /\[cursor\]/g;
            var splits = text.split(cursorReg);
            var cursorPos = false;
            if( splits.length > 1 ) {
                cursorPos = splits[0].length;
                text = splits.join("");
                cursorPos = convertToAcePos( text, cursorPos );
            }
            //console.log( "Setting editor:"+editor+" "+text);
            document.editorInfo.editors[editor].setValue(text, 1);
            if( cursorPos ) {
                document.editorInfo.editors[editor].gotoLine(cursorPos[0], cursorPos[1], false);
            }
            if( focus ) {
                document.editorInfo.editors[editor].focus();
            }
            return( text );
        },
        step: function( step ) {
            var codeReg = /\[code\](.+?)\[\/code\]/g;
            $li = document.createElement("li");
            var splits = step.text.split(codeReg);
            for( i = 1; i < splits.length; i+=2) {
                splits[i] = "<code class='lessonCode'>"+splits[i]+"</code>";
            }
            $li.innerHTML = splits.join("");
            $li.style.display = "none";
            $(this.$lessonList).children().last().wrap("<strike>");
            this.$lessonList.append($li);
            $($li).fadeIn().effect("highlight");
            this.contractSteps();
            this.current++;
            
            editorWatcher.focus(step.editor);
            editorWatcher.current = step.editor;
            
            if( step.editorText ) {
                var _this = this;
                $.get(step.editorText, function (data) {
                    step.editorText = _this.setEditorText(step.editor, data, false)
                    }, "text");
            } else if( ('gotoText' in step) && step['gotoText'] ) {
                /* Jump to position in editor */
                for( k in step['gotoText'] ) { 
                    /* TODO: Fix for off-focus editor */
                    var editorText = document.editorInfo.editors[k].getValue();
                    var pos = step.gotoText[k].exec( editorText );
                    if( pos ) {
                        pos = convertToAcePos( editorText, pos.index );
                        document.editorInfo.editors[k].gotoLine(pos[0], pos[1], false );
                    }
                }
            }
            /* Handle settting text in other tutorials */
            if( ('otherText' in step) && step['otherText'] ) {
                var _this = this;
                for( k in step['otherText'] ) {
                    (function(n) {
                        $.get(step['otherText'][n], function(data){
                            step['otherText'][n] = _this.setEditorText( n, data, false );
                        }, "text");
                    })(k);
                }
            }
            /* Handles completion function handler *required* */
            if( step.complete ) {
                editorWatcher.setHandler(step.editor, step.complete);
            }
            /* Handles releasing editor lock */
            if( ('release' in step) && step['release'] ) {
                editorWatcher.setRelease(true);
            }
            /* handles locking editor */
            if( ('lock' in step) && step['lock'] ) {
                editorWatcher.setLock(true);
            }
            /* handles locking tab */
            if( ('forceFocus' in step) && step['forceFocus'] ) {
                editorWatcher.forceFocus( step.editor );
            }
            /* handler switching tab */
            if( ('focus' in step) && step['focus'] ) {
                $("#tabs").tabs("option", "active", step.editor);
            }
            /* Allows user to skip : note if completion function is false this will force allowSkip */
            if( !step.complete || ( ('allowSkip' in step) && step['allowSkip'] ) ) {
                editorWatcher.allowSkip = true;
                document.querySelector(".tutorialContent .nextButton").style.display = "block";
            } else {
                editorWatcher.allowSkip = false;
                document.querySelector(".tutorialContent .nextButton").style.display = "none";
            }
            this.nextStep = false;
            if ( this.current < this.lesson.length ) {
                this.nextStep = this.lesson[this.current];
            }
        }
    }
    
    /* Register ace editor watcher function */
    var editorWatcher = {
        current: 0,
        initial: undefined,
        editors: undefined,
        handlers: {},
        lock: false,
        release: false,
        lastlock: false,
        focusRelease: false,
        allowSkip: false,
        init: function() {
            this.editors = document.editorInfo.editors;
            this.initial = document.editorInfo.initialContent;
            for( var i = 0; i < this.editors.length; ++i ) {
                var _this = this;
                (function (n){
                    _this.editors[i].on("change", function( e ) {
                        editorWatcher.editorHandler( e, n );
                    });
                })(i);
            }
            $(".tutorialContent .nextButton").click( this.buttonHandler );
        },
        /* e = ace thingy, n = editor index */
        editorHandler: function( e, n ) {
            var _this = editorWatcher;
            if( (n in _this.handlers) && _this.handlers[n] ) {
                var current = _this.editors[n].getSession().getValue();
                var user = _this.diff(_this.initial[n], current);
                //console.log( {current:current, user:user, output:undefined} );
                if( _this.handlers[n]( current, user, undefined ) ) {
                    _this.success(n);
                }
            }
        },
        buttonHandler: function(e) {
            _this = editorWatcher;
            if( _this.allowSkip ) {
                _this.success(_this.current);
            }
        },
        success: function(n) {
            console.log( "Success " + this.current );
            this.handlers[n] = undefined;
            if( this.release && this.lastlock ) {
                this.lastlock.setReadOnly(false);
                this.lastlock = false;
                this.release = false;
            }
            if( this.focusRelease ) {
                this.focusRelease = false;
                $("#tabs").tabs("enable");
            }
            if( this.lock ) {
                this.editors[n].setReadOnly(true);
                this.lastlock = this.editors[n];
                this.lock = false;
            }
            if( lessonManager.nextStep ) {
                lessonManager.step( lessonManager.nextStep );
            }
        },
        setLock: function( b ) {
            if( b ) {
                this.lock = true;
            } else {
                this.lock = false;
                if( this.lastlock ) {
                    this.lastlock.setReadOnly(false);
                    this.lastlock = false;
                }
            }
        },
        forceFocus: function( n ) {
            $tabs = $("#tabs");
            $tabs.tabs("option", "active", n);
            for( var i = 0; i < this.editors.length; ++i ) {
                if( i == n ) {
                    continue;
                }
                $tabs.tabs("disable", i);
            }
            this.focusRelease = true;
        },
		focus: function( n ) {
            $tabs = $("#tabs");
            $tabs.tabs("option", "active", n);
            for( var i = 0; i < this.editors.length; ++i ) {
                if( i == n ) {
					$tabs.tabs(i);
                    break;
                }
            }
        },
        setRelease: function( b ) {
            if( b ) {
                this.release = true;
            } else {
                this.release = false;
            }
        },
        setSuccess: function( f ) {
            this.success = f;
        },
        setHandler: function( key, handler ) {
            this.handlers[key] = handler;
        },
        tempDiffWarnOnce: false,
        diff: function( initial, current ) {
            if( !this.tempDiffWarnOnce ) {
                console.log("WARNING: Diff Unimplemented");
                this.tempDiffWarnOnce = true;
            }
            return ""; /* Incomplete */
        }
    }
    console.log("tutorialStart");
    editorWatcher.init();
    var num = false;
    if( window.location.hash ) {
        num = /[0-9]/.exec( window.location.hash );
    }
    if( num ) {
        if( num == "2" ) {
            lessonManager.init( "/js/tutorials/tutorial02/info.js" );
        } else if( num == "1" ||  num == "0") {
            lessonManager.init( "/js/tutorials/tutorial01/info.js" );
        }
        else {
            console.log( "ERROR: " + num + " not a tutorial index" );
            lessonManager.init();
        }
    } else {
        lessonManager.init();
    }
}

/* Disgusting hack TODO: Get our generic loader object to handler our js needs */
window.tutorialStart = tutorialStart;
</script>

<div class="tutorialContent">
<h3 class = "lessonName"></h3>
<ol class="lessonList">

</ol>
<div class="nextButton">
    <input type="button" value="Next Step"/>
</div>
</div>